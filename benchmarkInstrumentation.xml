<?xml version="1.0" encoding="UTF-8"?>
<jube>


	<parameterset	name="parameter">
		<!-- TODO REMOVE WHEN FILE SUBSTITUTION WILL BE IMPLEMENTED -->
		<parameter	name="HACK_PATH">							../../../../							</parameter>
		<!-- TODO END REMOVE WHEN FILE SUBSTITUTION WILL BE IMPLEMENTED -->
		<parameter	name="branch">								DEV-SL-AIO,DEV-SL-trunk					</parameter>
		<parameter	name="fileExec">							cube_remap2								</parameter>
		<parameter	name="filePathStatistic">					resource/statistic/						</parameter>
		<parameter	name="filePathExec">						../${branch}/_build/_install/bin/		</parameter>
		<parameter	name="filePathCubeInput">					resource/cubeInput/						</parameter>
		<parameter	name="cubeSpec">							resource/cubeInputSpec/ghost.spec		</parameter>
		<parameter	name="cubeDumpResFile">						resource/tmpCubeDumpFile				</parameter>
		<parameter	name="fileScriptPlot">						srcPlot/mainPlot.py						</parameter>
		<parameter	name="fileScriptParseCubeDumpRes">			srcPlot/mainParseCubeDumpResFile.py		</parameter>
		<parameter	name="nbProcessor">							2										</parameter>
		<parameter	name="nbTry">								4										</parameter>
		<parameter	name="benchmarkResultFile" >				${filePathStatistic}/${branch}.data		</parameter>
		<parameter	name="cube_totalTime_id">					0										</parameter>
		<parameter	name="cube_computeTime_id">					1										</parameter>
		<parameter	name="cube_computeTime_isRowWise_id">		2										</parameter>
		<parameter	name="cube_computeTime_get_sevs_raw_id">	3										</parameter>
		<parameter	name="cube_computeTime_set_sevs_raw_id">	4										</parameter>
		<parameter	name="cube_writeTime_id">					5										</parameter>
		<parameter	name="pthreadWrapperCommand" type="str">	export LD_PRELOAD=bin/pthreadWrapper.so	</parameter>
	</parameterset>

	<parameterset	name="parameter_variableDim">
		<parameter	name="nbIoDevice">							1										</parameter>
		<parameter	name="inputCubeFile"		mode="python">	",".join("${filePathCubeInput}/"+file for file in os.listdir("${filePathCubeInput}"))	</parameter>
	</parameterset>


	<!-- Operation -->
	<!-- Initializes all the results files: name = $HACK_PATH${benchmarkResultFile} -->
	<!-- Needs to be executed before any other operation -->
	<benchmark name="init_outputFile" outpath="bench_run">
		<comment>Creates and writes the header of the data files that will contain the benchmark pattern assessment results</comment>
		<step name="init_outputFile">
			<use>parameter</use>
			<do>echo											>  $HACK_PATH${benchmarkResultFile}	</do>
 			<do>echo "################################"			>> $HACK_PATH${benchmarkResultFile}	</do>
			<do>echo "#Benchmark pattern info:"					>> $HACK_PATH${benchmarkResultFile}	</do>
			<do>echo "################################"			>> $HACK_PATH${benchmarkResultFile}	</do>
			<do>echo ${branch}									>> $HACK_PATH${benchmarkResultFile}	</do>

			<do>echo "################################"			>> $HACK_PATH${benchmarkResultFile}	</do>
			<do>echo "#Variable dim:"							>> $HACK_PATH${benchmarkResultFile}	</do>
			<do>echo "################################"			>> $HACK_PATH${benchmarkResultFile}	</do>
			<do>echo "fileSize,nbIoDevice"			 			>> $HACK_PATH${benchmarkResultFile}	</do>

			<do>echo "################################"			>> $HACK_PATH${benchmarkResultFile}	</do>
			<do>echo "#Result dim:"								>> $HACK_PATH${benchmarkResultFile}	</do>
			<do>echo "################################"			>> $HACK_PATH${benchmarkResultFile}	</do>
			<do>echo "Total time,Compute time,Compute time is row wise,Compute time[get_sevs_raw],Compute time[set_sevs_raw],Write time"		>> $HACK_PATH${benchmarkResultFile}	</do>

			<do>echo "################################"			>> $HACK_PATH${benchmarkResultFile}	</do>
			<do>echo "#Number of tries:"						>> $HACK_PATH${benchmarkResultFile}	</do>
			<do>echo "################################"			>> $HACK_PATH${benchmarkResultFile}	</do>
 			<do>echo ${nbTry}									>> $HACK_PATH${benchmarkResultFile}	</do>

			<do>echo "################################"			>> $HACK_PATH${benchmarkResultFile}	</do>
			<do>echo "#Data:"									>> $HACK_PATH${benchmarkResultFile}	</do>
			<do>echo "################################"			>> $HACK_PATH${benchmarkResultFile}	</do>
		</step>
	</benchmark>


	<!-- Operation -->
	<!-- Run the different pattern benchmarks and assess them -->
	<!-- Needs to be executed after "init_outputFile"-->
	<benchmark name="run_benchmark" outpath="bench_run">
		<comment>Run the different pattern benchmarks and assess them</comment>
		<step name="run_benchmark">
			<use>parameter</use>
			<use>parameter_variableDim</use>
			<!-- Execute the benchmark pattern and write the parameters (thanks to logger option m) -->
			<do>	echo ${inputCubeFile}</do>
			<do>	export inputCubeFileSize=`stat --printf="%s" $HACK_PATH${inputCubeFile}`	</do>
			<do>	echo ${inputCubeFileSize}", "${nbIoDevice} >> $HACK_PATH${benchmarkResultFile} </do>
			<do>	for i in `seq 1 $nbTry`;
        			do
						rm -rf  scorep-*; \
						${pthreadWrapperCommand}; \
						${HACK_PATH}${filePathExec}/${fileExec} -r ${HACK_PATH}${cubeSpec} -d -o remappedFile.cubex $HACK_PATH/${inputCubeFile}; \
						rm remappedFile.cubex; \
						cube_dump scorep-*/profile.cubex -m time -z incl -c ${cube_totalTime_id} -c ${cube_computeTime_id} -c ${cube_computeTime_isRowWise_id} -c ${cube_computeTime_get_sevs_raw_id} -c ${cube_computeTime_set_sevs_raw_id} -c ${cube_writeTime_id} > $HACK_PATH${cubeDumpResFile};\
						python $HACK_PATH${fileScriptParseCubeDumpRes} $HACK_PATH${cubeDumpResFile} ${cube_totalTime_id} ${cube_computeTime_id} ${cube_computeTime_isRowWise_id} ${cube_computeTime_get_sevs_raw_id} ${cube_computeTime_set_sevs_raw_id} ${cube_writeTime_id} >> $HACK_PATH${benchmarkResultFile};\
						rm $HACK_PATH${cubeDumpResFile};
					done;
			</do>
		</step>
	</benchmark>


	<!-- Operation -->
	<!-- Plot the results of all the benchmark pattern assessments -->
	<!-- Needs to be executed after "run_benchmark" -->
	<benchmark name="plotSurface" outpath="bench_run">
		<comment>Plot the results of all the benchmark pattern assessments</comment>
		<!-- Operation -->
		<step name="plotSurface">
			<use>parameter						</use>
			<do> python $HACK_PATH${fileScriptPlot} $HACK_PATH${benchmarkResultFile} -multipleTry -plotType=surface -sortDim=fileSize</do>
		</step>
	</benchmark>


	<!-- Operation -->
	<!-- Plot the results of all the benchmark pattern assessments -->
	<!-- Needs to be executed after "run_benchmark" -->
	<benchmark name="plotCloud" outpath="bench_run">
		<comment>Plot the results of all the benchmark pattern assessments</comment>
		<!-- Operation -->
		<step name="plotCloud">
			<use>parameter						</use>
			<do> python $HACK_PATH${fileScriptPlot} $HACK_PATH${benchmarkResultFile} -multipleTry -plotType=cloud -sortDim=fileSize</do>
		</step>
	</benchmark>


	<!-- Operation -->
	<!-- Plot the results of all the benchmark pattern assessments -->
	<!-- Needs to be executed after "run_benchmark" -->
	<benchmark name="plotBar" outpath="bench_run">
		<comment>Plot the results of all the benchmark pattern assessments</comment>
		<!-- Operation -->
		<step name="plotBar">
			<use>parameter							</use>
			<do> python $HACK_PATH${fileScriptPlot} $HACK_PATH${benchmarkResultFile} -multipleTry -plotType=bar:nbIoDevice:all -sortDim=fileSize</do>
		</step>
	</benchmark>


	<!-- Operation -->
	<!-- Plot the results of all the benchmark pattern assessments -->
	<!-- Needs to be executed after "run_benchmark" -->
	<benchmark name="plotPoint" outpath="bench_run">
		<comment>Plot the results of all the benchmark pattern assessments</comment>
		<!-- Operation -->
		<step name="plotPoint">
			<use>parameter							</use>
			<do> python $HACK_PATH${fileScriptPlot} $HACK_PATH${benchmarkResultFile} -multipleTry -plotType=point:nbIoDevice:all -sortDim=fileSize</do>
		</step>
	</benchmark>


	<!-- Operation -->
	<!-- Plot the results of all the benchmark pattern assessments -->
	<!-- Needs to be executed after "run_benchmark" -->
	<benchmark name="plotBarCompare" outpath="bench_run">
		<comment>Plot the results of all the benchmark pattern assessments</comment>
		<!-- Operation -->
		<step name="plotBarCompare">
			<use>parameter							</use>
			<do> python $HACK_PATH${fileScriptPlot} $HACK_PATH${filePathStatistic}/*.data -multipleTry -plotType=bar:nbIoDevice:all -sortDim=fileSize</do>
		</step>
	</benchmark>


	<!-- Operation -->
	<!-- Plot the results of all the benchmark pattern assessments -->
	<!-- Needs to be executed after "run_benchmark" -->
	<benchmark name="plotPointCompare" outpath="bench_run">
		<comment>Plot the results of all the benchmark pattern assessments</comment>
		<!-- Operation -->
		<step name="plotPointCompare">
			<use>parameter							</use>
			<do> python $HACK_PATH${fileScriptPlot} $HACK_PATH${filePathStatistic}/*.data -multipleTry -plotType=point:nbIoDevice:all -sortDim=fileSize</do>
		</step>
	</benchmark>

</jube>





